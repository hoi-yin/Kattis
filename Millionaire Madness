import java.util.*;
import java.io.*;
public class millionairemadness {
  public static void main(String[] args)throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter output = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    
    int row,col;
    String[] Line1 = br.readLine().split(" ");
    row = Integer.parseInt(Line1[0]);
    col = Integer.parseInt(Line1[1]);
    
    int[][] vault = new int[row][col];
    int[][] Tracker = new int[row][col];
    
    for(int i=0;i<row;i++){
        String[] Line2 = br.readLine().split(" ");
        for(int j=0;j<col;j++){
            vault[i][j] = Integer.parseInt(Line2[j]);
        }
    }
    
    int[][] coordinatesdisplacement = new int[4][2];
    coordinatesdisplacement[0][0] = 0;
    coordinatesdisplacement[0][1] = -1;
    coordinatesdisplacement[1][0] = 0;
    coordinatesdisplacement[1][1] = 1;
    coordinatesdisplacement[2][0] = -1;
    coordinatesdisplacement[2][1] = 0;
    coordinatesdisplacement[3][0] = 1;
    coordinatesdisplacement[3][1] = 0;
    
    PriorityQueue<int[]> Actions = new PriorityQueue<int[]>(new infoComparator());
    int ladder = 0;
    int[] Directions = new int[4];
    Directions[0] = Directions[1] = Directions[3] = 0;
    Directions[2] = vault[0][0];
    Tracker[0][0] = 1;
    Actions.add(Directions);
    
    for(int k=0; k<1000000000; k++){
        if(Tracker[row-1][col-1]==1 || Actions.size()==0){
            break;
        }
        else{
            int[] temp = Actions.poll();
            Tracker[temp[0]][temp[1]] = 1;
            ladder = Math.max(temp[3], ladder);
        
            for(int l=0;l<4;l++){
                int rows = temp[0] + coordinatesdisplacement[l][0];
                int cols = temp[1] + coordinatesdisplacement[l][1];
                if(rows>=0 && cols>=0 && rows<row && cols<col){
                    if(Tracker[rows][cols]!=1){
                        int[] temp2 = new int[4];
                        temp2[0] = rows;
                        temp2[1] = cols;
                        temp2[2] = vault[rows][cols];
                        temp2[3] = vault[rows][cols]-temp[2];
                        Actions.add(temp2);
                    }
                }
            }
        }
    }
    output.println(ladder);
    output.flush();
    output.close();
  }
}
    
class infoComparator implements Comparator<int[]> {
    @Override
    public int compare(int[] p1, int[] p2) {
        if(p1[3]<p2[3]){
            return -1;
        } else if (p1[3]>p2[3]){
            return 1;
        }else{
            return 0;
        }
    }
}
